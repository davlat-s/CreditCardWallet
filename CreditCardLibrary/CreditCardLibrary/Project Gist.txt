//Users/davlatsirojitdinov/git/CreditCardLibrary
├── CreditCardLibrary/
│   ├── CreditCardLibrary/
│   │   ├── Assets.xcassets/
│   │   │   ├── AccentColor.colorset/
│   │   │   ├── American Express_resized/
│   │   │   │   ├── American_Express-Business-Additional_Card.imageset/
│   │   │   │   ├── American_Express-Business-Amazon_Business_Prime.imageset/
│   │   │   │   ├── American_Express-Business-Blue_Business_Plus.imageset/
│   │   │   │   ├── American_Express-Business-Business_Gold.imageset/
│   │   │   │   ├── American_Express-Business-Business_Green.imageset/
│   │   │   │   ├── American_Express-Business-Business_Platinum.imageset/
│   │   │   │   ├── American_Express-Business-Plum.imageset/
│   │   │   │   ├── American_Express-Business-jpeg-Bunisess_Platinum_2024.imageset/
│   │   │   │   ├── American_Express-Business-jpeg-Business_Delta_Reserve_747.imageset/
│   │   │   │   ├── American_Express-Business-jpeg-Business_Marriot_Bonvey.imageset/
│   │   │   │   ├── American_Express-Business-low_res-Blue_Business_Plus_2020.imageset/
│   │   │   │   ├── American_Express-Business-low_res-Business_Cash.imageset/
│   │   │   │   ├── American_Express-Other-lowres-Send.imageset/
│   │   │   │   ├── American_Express-Personal-Blue_Cash_Everyday.imageset/
│   │   │   │   ├── American_Express-Personal-Blue_Cash_Preferred.imageset/
│   │   │   │   ├── American_Express-Personal-Blue_Sky.imageset/
│   │   │   │   ├── American_Express-Personal-Companion.imageset/
│   │   │   │   ├── American_Express-Personal-Delta_Gold.imageset/
│   │   │   │   ├── American_Express-Personal-Delta_Platinum.imageset/
│   │   │   │   ├── American_Express-Personal-Every_Day.imageset/
│   │   │   │   ├── American_Express-Personal-Gold.imageset/
│   │   │   │   ├── American_Express-Personal-Green.imageset/
│   │   │   │   ├── American_Express-Personal-Hilton_Honors.imageset/
│   │   │   │   ├── American_Express-Personal-Hilton_Honors_Aspire_2023.imageset/
│   │   │   │   ├── American_Express-Personal-Hilton_Honors_Aspire_old.imageset/
│   │   │   │   ├── American_Express-Personal-Hilton_Honors_Surpass_2024.imageset/
│   │   │   │   ├── American_Express-Personal-Hilton_Honors_Surpass_old.imageset/
│   │   │   │   ├── American_Express-Personal-Hilton_Honors_old.imageset/
│   │   │   │   ├── American_Express-Personal-Marriott_Bonvoy.imageset/
│   │   │   │   ├── American_Express-Personal-Marriott_Bonvoy_Brilliant_old.imageset/
│   │   │   │   ├── American_Express-Personal-Morgan_Stanley.imageset/
│   │   │   │   ├── American_Express-Personal-Platinum.imageset/
│   │   │   │   ├── American_Express-Personal-Platinum_Morgan_Stanley.imageset/
│   │   │   │   ├── American_Express-Personal-Platinum_Schwab.imageset/
│   │   │   │   ├── American_Express-Personal-Platinum_x_Kehinde_Wiley.imageset/
│   │   │   │   ├── American_Express-Personal-Rose_Gold.imageset/
│   │   │   │   ├── American_Express-Personal-White_Gold.imageset/
│   │   │   │   ├── American_Express-Personal-jpeg-Centurion.imageset/
│   │   │   │   ├── American_Express-Personal-jpeg-Centurion_2.imageset/
│   │   │   │   ├── American_Express-Personal-jpeg-Schwab.imageset/
│   │   │   │   ├── American_Express-Personal-low_res-Delta_Blue.imageset/
│   │   │   │   ├── American_Express-Personal-low_res-Every_Day_2024.imageset/
│   │   │   │   ├── American_Express-Personal-low_res-Every_Day_Preferred.imageset/
│   │   │   │   ├── American_Express-Personal-low_res-Platinum_Pre_2020.imageset/
│   │   │   │   ├── American_Express-Personal-low_res-debit.imageset/
│   │   │   │   └── American_Express-Personal-low_res_jpeg-Marriott_Bonvoy_Brilliant_2024.imageset/
│   │   │   ├── AppIcon.appiconset/
│   │   │   ├── Background.colorset/
│   │   │   ├── Bank of America_resized/
│   │   │   │   ├── Bank_of_America-Credit_Cards-Alaska_Airlines.imageset/
│   │   │   │   ├── Bank_of_America-Credit_Cards-BankAmericard.imageset/
│   │   │   │   ├── Bank_of_America-Credit_Cards-Better_Balance_Rewards.imageset/
│   │   │   │   ├── Bank_of_America-Credit_Cards-Cash_Rewards.imageset/
│   │   │   │   ├── Bank_of_America-Credit_Cards-Cash_Rewards_2020_Mastercard.imageset/
│   │   │   │   ├── Bank_of_America-Credit_Cards-Cash_Rewards_2020_Visa.imageset/
│   │   │   │   ├── Bank_of_America-Credit_Cards-Custom_Cash_Rewards_Mastercard.imageset/
│   │   │   │   ├── Bank_of_America-Credit_Cards-Custom_Cash_Rewards_Visa.imageset/
│   │   │   │   ├── Bank_of_America-Credit_Cards-MLB.imageset/
│   │   │   │   ├── Bank_of_America-Credit_Cards-Premium_Rewards.imageset/
│   │   │   │   ├── Bank_of_America-Credit_Cards-Travel_Rewards.imageset/
│   │   │   │   ├── Bank_of_America-Credit_Cards-UCI.imageset/
│   │   │   │   ├── Bank_of_America-Credit_Cards-University_of_Michigan.imageset/
│   │   │   │   ├── Bank_of_America-Credit_Cards-jpeg-NWF_Fox.imageset/
│   │   │   │   ├── Bank_of_America-Credit_Cards-jpeg-Susan_G_Komen.imageset/
│   │   │   │   ├── Bank_of_America-Credit_Cards-jpeg-WWF.imageset/
│   │   │   │   ├── Bank_of_America-Credit_Cards-low_res-Premium_Rewards_Elite.imageset/
│   │   │   │   ├── Bank_of_America-Credit_Cards-low_res-U.S._Pride.imageset/
│   │   │   │   ├── Bank_of_America-Credit_Cards-low_res.-Premium_Rewards_2020.imageset/
│   │   │   │   ├── Bank_of_America-Debit_Cards-Another_Default.imageset/
│   │   │   │   ├── Bank_of_America-Debit_Cards-BoA_University_of_Michigan_Alumni_Debit.imageset/
│   │   │   │   ├── Bank_of_America-Debit_Cards-Columbia.imageset/
│   │   │   │   ├── Bank_of_America-Debit_Cards-jpeg-UTAM.imageset/
│   │   │   │   ├── Bank_of_America-Debit_Cards-low_res-Bank_of_America_Cal_Association.imageset/
│   │   │   │   ├── Bank_of_America-Debit_Cards-low_res-BoA_Brandeis_Alumni_Association.imageset/
│   │   │   │   └── Bank_of_America-Debit_Cards-low_res-Default.imageset/
│   │   │   ├── Barclays_resized/
│   │   │   │   ├── Barclays-AAdvantage_Aviator.imageset/
│   │   │   │   ├── Barclays-Arrival.imageset/
│   │   │   │   ├── Barclays-JetBlue.imageset/
│   │   │   │   ├── Barclays-Rewards.imageset/
│   │   │   │   ├── Barclays-Uber.imageset/
│   │   │   │   ├── Barclays-jpeg-Avios.imageset/
│   │   │   │   └── Barclays-low_res-Premier.imageset/
│   │   │   ├── Capital One_resized/
│   │   │   │   ├── Capital_One-Capital_One_Quick_Silver.imageset/
│   │   │   │   └── Capital_One-Capital_One_Venture_X.imageset/
│   │   │   ├── Chase_resized/
│   │   │   │   ├── Chase-Business_Cards-Ink_Cash.imageset/
│   │   │   │   ├── Chase-Business_Cards-Ink_Cash_old.imageset/
│   │   │   │   ├── Chase-Business_Cards-Ink_Preferred.imageset/
│   │   │   │   ├── Chase-Business_Cards-Ink_Unlimited.imageset/
│   │   │   │   ├── Chase-Business_Cards-jpeg-Hyatt.imageset/
│   │   │   │   ├── Chase-Business_Cards-jpeg-Platinum_business.imageset/
│   │   │   │   ├── Chase-Business_Cards-jpeg-ink_premier.imageset/
│   │   │   │   ├── Chase-Business_Cards-low_res-Ink_Unlimited_old.imageset/
│   │   │   │   ├── Chase-Debit_Cards-Debit_Card.imageset/
│   │   │   │   ├── Chase-Debit_Cards-Disney_Midnight.imageset/
│   │   │   │   ├── Chase-Debit_Cards-Frozen.imageset/
│   │   │   │   ├── Chase-Debit_Cards-Private_Client.imageset/
│   │   │   │   ├── Chase-Debit_Cards-Star_Wars.imageset/
│   │   │   │   ├── Chase-Debit_Cards-jpeg-J.P.Morgan.imageset/
│   │   │   │   ├── Chase-Debit_Cards-jpeg-Star_Wars_new.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-Amazon_Prime.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-Disney.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-Freedom.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-Freedom_Flex.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-Freedom_Unlimited.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-IHG_Gold.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-IHG_One_Rewards_Premier.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-Marriott_Bonvoy_Bold.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-Marriott_Bonvoy_Boundless_2023.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-Marriott_Bonvoy_Boundless_old.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-Ritz-Carlton.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-Sapphire_Preferred.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-Sapphire_Preferred_2020.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-Sapphire_Reserve.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-Southwest_Plus.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-Southwest_Premier_Business.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-Southwest_Priority.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-United_Mileage_Plus.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-United_Mileage_Plus_Explorer.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-World_of_Hyatt.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-jpeg-Amazon_not_prime.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-jpeg-United_Mileage_Plus_CLUB.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-jpeg-United_Mileage_Plus_Gateway_2024.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-jpeg-United_Mileage_Plus_Quest_2024.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-low_res-Amazon_Prime_Whole_Foods.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-low_res-IHG_One_Rewards_Select_old.imageset/
│   │   │   │   ├── Chase-Personal_Credi_Cards-low_res-United_Mileage_Plus_Gateway.imageset/
│   │   │   │   └── Chase-Personal_Credi_Cards-low_res-United_Mileage_Plus_Quest.imageset/
│   │   │   ├── Citi_resized/
│   │   │   │   ├── Citi-AAdvantage_Platinum_Select.imageset/
│   │   │   │   ├── Citi-CitiBusiness_AAdvantage_Platinum_Select.imageset/
│   │   │   │   ├── Citi-Debit_Cards-Citigold_Debit.imageset/
│   │   │   │   ├── Citi-Debit_Cards-jpeg-Citigold_Private_Client.imageset/
│   │   │   │   ├── Citi-Debit_Cards-low_res-Debit.imageset/
│   │   │   │   ├── Citi-Dividend.imageset/
│   │   │   │   ├── Citi-Double_Cash_Old.imageset/
│   │   │   │   ├── Citi-Premier.imageset/
│   │   │   │   ├── Citi-Premier_Pre_2021.imageset/
│   │   │   │   ├── Citi-Rewards.imageset/
│   │   │   │   ├── Citi-Thank_You_Preferred.imageset/
│   │   │   │   ├── Citi-jpeg-CitiBusiness_AAdvantage.imageset/
│   │   │   │   ├── Citi-jpeg-Strata_Premier.imageset/
│   │   │   │   ├── Citi-low_res-AAdvantage_MileUp.imageset/
│   │   │   │   ├── Citi-low_res-Costco_Anywhere.imageset/
│   │   │   │   ├── Citi-low_res-Double_Cash_2024.imageset/
│   │   │   │   └── Citi-low_res_jpeg-AAdvantage_Executive.imageset/
│   │   │   ├── Discover_resized/
│   │   │   │   ├── Discover-Cashback_Debit.imageset/
│   │   │   │   ├── Discover-Other_Designs-New_York_Skyline.imageset/
│   │   │   │   ├── Discover-Other_Designs-Tiger.imageset/
│   │   │   │   ├── Discover-Other_Designs-jpeg-Cat.imageset/
│   │   │   │   ├── Discover-Other_Designs-jpeg-Green.imageset/
│   │   │   │   ├── Discover-Other_Designs-jpeg-Husky.imageset/
│   │   │   │   ├── Discover-Other_Designs-jpeg-Polar_Bear.imageset/
│   │   │   │   ├── Discover-Other_Designs-jpeg-old.imageset/
│   │   │   │   ├── Discover-Other_Designs-mixtape.imageset/
│   │   │   │   ├── Discover-Other_Designs-wolf.imageset/
│   │   │   │   ├── Discover-it_Standard_Designs-City.imageset/
│   │   │   │   ├── Discover-it_Standard_Designs-Garnet.imageset/
│   │   │   │   ├── Discover-it_Standard_Designs-Iridescent.imageset/
│   │   │   │   ├── Discover-it_Standard_Designs-Mountain.imageset/
│   │   │   │   ├── Discover-it_Standard_Designs-Ocean.imageset/
│   │   │   │   ├── Discover-it_Standard_Designs-Pride.imageset/
│   │   │   │   ├── Discover-it_Standard_Designs-Rose_Quartz.imageset/
│   │   │   │   └── Discover-it_Standard_Designs-need_high_res-Blue.imageset/
│   │   │   ├── GrayDetailRow.colorset/
│   │   │   ├── HSBC_resized/
│   │   │   │   ├── HSBC-Premier_Debit.imageset/
│   │   │   │   ├── HSBC-Premier_Everyday_Global_Debit.imageset/
│   │   │   │   ├── HSBC-Premier_World.imageset/
│   │   │   │   ├── HSBC-jpeg-Elite.imageset/
│   │   │   │   ├── HSBC-jpeg-Premier_Credit.imageset/
│   │   │   │   ├── HSBC-jpeg-Premier_World_Elite_2.imageset/
│   │   │   │   ├── HSBC-jpeg-Red.imageset/
│   │   │   │   └── HSBC-low_res-Premier_World_Elite.imageset/
│   │   │   ├── NotesGrid.colorset/
│   │   │   ├── US Bank_resized/
│   │   │   │   ├── US_Bank-Attitude_Reserve2020.imageset/
│   │   │   │   ├── US_Bank-Attitude_Reserve_20212022.imageset/
│   │   │   │   ├── US_Bank-Cash_Plus.imageset/
│   │   │   │   ├── US_Bank-Debit-jpeg-US_National_Flag.imageset/
│   │   │   │   ├── US_Bank-Debit-low_res-Second_Wave.imageset/
│   │   │   │   ├── US_Bank-Go.imageset/
│   │   │   │   ├── US_Bank-Leverage.imageset/
│   │   │   │   ├── US_Bank-jpeg-Attitude_Reserve_2023.imageset/
│   │   │   │   ├── US_Bank-jpeg-Business_Triple_Cash.imageset/
│   │   │   │   ├── US_Bank-jpeg-Pride.imageset/
│   │   │   │   ├── US_Bank-jpeg-Ralphs.imageset/
│   │   │   │   ├── US_Bank-low_res-Altitude_Connect.imageset/
│   │   │   │   ├── US_Bank-low_res-Cash_Plus_2020.imageset/
│   │   │   │   ├── US_Bank-low_res-Cash_Plus_2024.imageset/
│   │   │   │   └── US_Bank-low_res-RBC_Avion_VI.imageset/
│   │   │   ├── Wells Fargo_resized/
│   │   │   │   ├── Others-Credit_Cards-Wells_Fargo_Propel.imageset/
│   │   │   │   └── Others-Credit_Cards-jpeg-Bilt.imageset/
│   │   │   ├── default.imageset/
│   │   │   └── modular card design/
│   │   │       ├── amexLogo.imageset/
│   │   │       ├── chip.imageset/
│   │   │       ├── chip1.imageset/
│   │   │       ├── chip2.imageset/
│   │   │       ├── discoverLogo.imageset/
│   │   │       ├── mastercardLogo.imageset/
│   │   │       └── visaLogo.imageset/
│   │   ├── CreditCardLibraryApp.swift
│   │   ├── MainAppContainer .swift
│   │   ├── Model/
│   │   │   ├── Bank.swift
│   │   │   ├── Bonus.swift
│   │   │   ├── CardArt.swift
│   │   │   ├── Closed.swift
│   │   │   ├── CreditCard.swift
│   │   │   ├── HistoryEntry.swift
│   │   │   ├── PaymentProcessor.swift
│   │   │   ├── PaymentProcessorInstances.swift
│   │   │   ├── Promotion.swift
│   │   │   ├── SideBarCategories.swift
│   │   │   └── loadBankCardArtData.swift
│   │   ├── Preview Content/
│   │   │   └── Preview Assets.xcassets/
│   │   ├── Utilities/
│   │   │   ├── AppStorageKeys.swift
│   │   │   └── PreviewData.swift
│   │   └── Views/
│   │       ├── CardDetailViews/
│   │       │   ├── CardHistoryView.swift
│   │       │   ├── DetailContentView.swift
│   │       │   ├── DetailRowView.swift
│   │       │   ├── DetailView.swift
│   │       │   └── HistoryToggleView.swift
│   │       ├── CardViews/
│   │       │   ├── CardCellView.swift
│   │       │   ├── CardImageView.swift
│   │       │   └── GridContentView.swift
│   │       ├── ChartViews/
│   │       │   ├── BankBreakdownChart.swift
│   │       │   ├── BarChartView.swift
│   │       │   ├── ChartsContentView.swift
│   │       │   ├── CreditAgeChart.swift
│   │       │   ├── CreditLimitBreakdownChart.swift
│   │       │   └── PieChartView.swift
│   │       ├── Form/
│   │       │   ├── AddBankView.swift
│   │       │   ├── AddBonusView.swift
│   │       │   ├── AddPromotionView.swift
│   │       │   ├── CardImagePickerView.swift
│   │       │   ├── CloseCardView.swift
│   │       │   ├── FormAddView.swift
│   │       │   ├── FormEditView.swift
│   │       │   ├── FormHelpers/
│   │       │   │   ├── CardImagePickerSectionHeaderView.swift
│   │       │   │   ├── CustomDatePicker.swift
│   │       │   │   ├── CustomNumberField.swift
│   │       │   │   ├── CustomPicker.swift
│   │       │   │   ├── CustomText.swift
│   │       │   │   ├── CustomTextField.swift
│   │       │   │   └── CustomToggle.swift
│   │       │   ├── FormView.swift
│   │       │   └── SelectCardImageView.swift
│   │       ├── ManuBar/
│   │       │   └── MenuBarContentView.swift
│   │       ├── NaviationViews/
│   │       │   ├── MainContentView.swift
│   │       │   └── SidebarView.swift
│   │       └── SettingsWindow/
│   │           ├── BankTabView.swift
│   │           ├── BonusTabView.swift
│   │           ├── PromotionsTabView.swift
│   │           ├── SettingsContentView.swift
│   │           └── SettingsTabView.swift
│   └── CreditCardLibrary.xcodeproj/
│       ├── project.xcworkspace/
│       │   ├── xcshareddata/
│       │   │   └── swiftpm/
│       │   │       └── configuration/
│       │   └── xcuserdata/
│       ├── xcshareddata/
│       │   └── xcschemes/
│       └── xcuserdata/



/** File: /CreditCardLibraryApp.swift ***************************************/
import SwiftUI
import SwiftData
@main
@MainActor
struct CreditCardLibraryApp: App {
 
 @AppStorage(AppStorageKeys.menuBarShown) var menuBarShown: Bool = true
 
 let modelContainer = try! ModelContainer(for: CreditCard.self, Bank.self, PaymentProcessor.self)
 
 var body: some Scene {
 
 WindowGroup("Main Widnow") {
 MainContentView(selectedCategory: $sidebarSelection, columnVisibility: $columnVisibility)
 .toolbarBackground(.ultraThickMaterial)
 .frame(minWidth: 600, idealWidth: 1200, maxWidth: 1400, minHeight: 300, idealHeight: 600, maxHeight: 900)
 .onAppear {
 columnVisibility = .all
 }
 }
 .defaultPosition(.center)
 .defaultSize(width: 1200, height: 900)
 .modelContainer(MainAppContainer
 )
 .windowStyle(.hiddenTitleBar)
 .windowResizability(.contentSize)
 
 Settings {
 SettingsContentView()
 }
 .modelContainer(MainAppContainer
 )
 
 MenuBarExtra(isInserted: $menuBarShown) {
 MenuBarContentView()
 } label: {
 Label("WalletApp", systemImage: "creditcard.fill")
 }
 .modelContainer(MainAppContainer
 )
 .menuBarExtraStyle(.menu)
 
 WindowGroup("Add Credit Card", id: "AddCreditCardWindow") {
 FormAddView()
 .frame(width: 700, height: 800, alignment: .center)
 
 }
 .defaultPosition(.top )
 .modelContainer(MainAppContainer
 )
 .windowResizability(.contentSize)
 
 }
 @State var sidebarSelection: SideBarCategories = .all
 @State var columnVisibility: NavigationSplitViewVisibility = .all
}



/** File: /MainAppContainer .swift ***************************************/
import Foundation
import SwiftData
@MainActor
let MainAppContainer
: ModelContainer = {
 do {
 let container = try ModelContainer(
 for: CreditCard.self,
 Bank.self, Closed.self,
 Promotion.self, Bonus.self,
 PaymentProcessor.self,
 CardArt.self)
 
 
 var PaymentProcessorFetchDescriptor = FetchDescriptor<PaymentProcessor>()
 PaymentProcessorFetchDescriptor.fetchLimit = 1
 
 guard try container.mainContext.fetch(PaymentProcessorFetchDescriptor).count == 0 else { return container }
 
 
 let PaymentProcessors = [
 PaymentProcessor(name: "Visa", logo: "visaLogo"),
 PaymentProcessor(name: "Mastercard", logo: "mastercardLogo"),
 PaymentProcessor(name: "AmEx", logo: "amexLogo"),
 PaymentProcessor(name: "Discover", logo: "discoverLogo")
 ]
 
 
 for pp in PaymentProcessors {
 container.mainContext.insert(pp)
 }
 
 var BankFetchDescriptor = FetchDescriptor<Bank>()
 BankFetchDescriptor.fetchLimit = 1
 
 guard try container.mainContext.fetch(BankFetchDescriptor).count == 0 else {
 
 return container
 }
 
 
 if let bankCardArtData = loadBankCardArtData() {
 
 for (bankName, filenames) in bankCardArtData {
 
 let bank = Bank(name: bankName)
 container.mainContext.insert(bank)
 
 
 for artFilename in filenames {
 let cardArt = CardArt(assetID: artFilename, bank: bank)
 container.mainContext.insert(cardArt)
 }
 }
 
 
 try? container.mainContext.save()
 } else {
 print("Could not load JSON bank + cardArt data.")
 }
 
 
 func bank(withName name: String, in context: ModelContext) -> Bank? {
 let request = FetchDescriptor<Bank>(predicate: #Predicate { bank in
 bank.name == name
 })
 return try? context.fetch(request).first
 }
 
 if let chaseBank = bank(withName: "Chase", in: container.mainContext) {
 let newCards = [
 CreditCard(
 name: "Sapphire Reserve",
 creditLimit: 12000,
 openDate: Calendar.current.date(byAdding: .year, value: -2, to: Date.now) ?? Date.now,
 isBusiness: false,
 isChargeCard: false,
 annualFee: 450,
 lastDigits: "3552",
 bank: chaseBank,
 promotions: [],
 bonuses: [],
 closed: nil,
 paymentProcessor: PaymentProcessor.visa,
 cardArt: CardArt(assetID: "Chase-Personal_Credi_Cards-Sapphire_Reserve")
 ),
 CreditCard(
 name: "Ink Unlimited",
 creditLimit: 24000,
 openDate: Calendar.current.date(byAdding: .year, value: -1, to: Date.now) ?? Date.now,
 isBusiness: true,
 isChargeCard: false,
 annualFee: 95,
 lastDigits: "3532",
 bank: chaseBank,
 promotions: [],
 bonuses: [],
 closed: nil,
 paymentProcessor: PaymentProcessor.visa,
 cardArt: CardArt(assetID: "Chase-Business_Cards-Ink_Unlimited")
 ),
 CreditCard(
 name: "Freedom Flex",
 creditLimit: 6000,
 openDate: Calendar.current.date(byAdding: .year, value: -4, to: Date.now) ?? Date.now,
 isBusiness: false,
 isChargeCard: false,
 annualFee: 0,
 lastDigits: "3556",
 bank: chaseBank,
 promotions: [],
 bonuses: [],
 closed: nil,
 paymentProcessor: PaymentProcessor.visa,
 cardArt: CardArt(assetID: "Chase-Personal_Credi_Cards-Freedom_Flex")
 ),
 CreditCard(
 name: "Freedom Unlimited",
 creditLimit: 2000,
 openDate: Calendar.current.date(byAdding: .year, value: -6, to: Date.now) ?? Date.now,
 isBusiness: false,
 isChargeCard: false,
 annualFee: 0,
 lastDigits: "3656",
 bank: chaseBank,
 promotions: [],
 bonuses: [],
 closed: Closed(reason: "just because"),
 paymentProcessor: PaymentProcessor.visa,
 cardArt: CardArt(assetID: "Chase-Personal_Credi_Cards-Freedom_Unlimited")
 ),
 CreditCard(
 name: "Ink Premier",
 creditLimit: 28000,
 openDate: Calendar.current.date(byAdding: .year, value: -3, to: Date.now) ?? Date.now,
 isBusiness: true,
 isChargeCard: false,
 annualFee: 195,
 lastDigits: "9356",
 bank: chaseBank,
 promotions: [],
 bonuses: [],
 closed: nil,
 paymentProcessor: PaymentProcessor.visa,
 cardArt: CardArt(assetID: "Chase-Business_Cards-jpeg-ink_premier")
 ),]
 for card in newCards {
 container.mainContext.insert(card)
 }
 }
 
 if let amExBank = bank(withName: "American Express", in: container.mainContext) {
 let newCards = [
 CreditCard(
 name: "Centurion",
 creditLimit: nil,
 openDate: Calendar.current.date(byAdding: .year, value: -1, to: Date.now) ?? Date.now,
 isBusiness: false,
 isChargeCard: true,
 annualFee: 950,
 lastDigits: "35552",
 bank: amExBank,
 promotions: [],
 bonuses: [],
 closed: nil,
 paymentProcessor: PaymentProcessor.amex,
 cardArt: CardArt(assetID: "American_Express-Personal-jpeg-Centurion_2")
 ),
 CreditCard(
 name: "Platinum",
 creditLimit: nil,
 openDate: Calendar.current.date(byAdding: .year, value: -3, to: Date.now) ?? Date.now,
 isBusiness: true,
 isChargeCard: true,
 annualFee: 695,
 lastDigits: "35332",
 bank: amExBank,
 promotions: [],
 bonuses: [],
 closed: nil,
 paymentProcessor: PaymentProcessor.amex,
 cardArt: CardArt(assetID: "American_Express-Business-jpeg-Bunisess_Platinum_2024")
 ),
 CreditCard(
 name: "Gold",
 creditLimit: nil,
 openDate: Calendar.current.date(byAdding: .year, value: -5, to: Date.now) ?? Date.now,
 isBusiness: false,
 isChargeCard: false,
 annualFee: 295,
 lastDigits: "35356",
 bank: amExBank,
 promotions: [],
 bonuses: [],
 closed: nil,
 paymentProcessor: PaymentProcessor.amex,
 cardArt: CardArt(assetID: "American_Express-Personal-White_Gold")
 ),
 CreditCard(
 name: "Hilton Aspire",
 creditLimit: 4000,
 openDate: Calendar.current.date(byAdding: .year, value: -3, to: Date.now) ?? Date.now,
 isBusiness: false,
 isChargeCard: false,
 annualFee: 450,
 lastDigits: "3652",
 bank: amExBank,
 promotions: [],
 bonuses: [],
 closed: nil,
 paymentProcessor: PaymentProcessor.amex,
 cardArt: CardArt(assetID: "American_Express-Personal-Hilton_Honors_Aspire_old")
 ),
 CreditCard(
 name: "Every Day Preferred",
 creditLimit: 28000,
 openDate: Calendar.current.date(byAdding: .year, value: -4, to: Date.now) ?? Date.now,
 isBusiness: false,
 isChargeCard: false,
 annualFee: 95,
 lastDigits: "33556",
 bank: amExBank,
 promotions: [],
 bonuses: [],
 closed: nil,
 paymentProcessor: PaymentProcessor.amex,
 cardArt: CardArt(assetID: "American_Express-Personal-low_res-Every_Day_Preferred")
 ),]
 for card in newCards {
 container.mainContext.insert(card)
 }
 }
 
 if let citiBank = bank(withName: "Citi", in: container.mainContext) {
 let newCards = [
 CreditCard(
 name: "Rewards",
 creditLimit: 10000,
 openDate: Calendar.current.date(byAdding: .year, value: -2, to: Date.now) ?? Date.now,
 isBusiness: false,
 isChargeCard: false,
 annualFee: 450,
 lastDigits: "5552",
 bank: citiBank,
 promotions: [],
 bonuses: [],
 closed: nil,
 paymentProcessor: PaymentProcessor.visa,
 cardArt: CardArt(assetID: "Citi-Rewards")
 ),
 CreditCard(
 name: "Double Cash",
 creditLimit: 3000,
 openDate: Calendar.current.date(byAdding: .year, value: -3, to: Date.now) ?? Date.now,
 isBusiness: false,
 isChargeCard: false,
 annualFee: 0,
 lastDigits: "3752",
 bank: citiBank,
 promotions: [],
 bonuses: [],
 closed: nil,
 paymentProcessor: PaymentProcessor.visa,
 cardArt: CardArt(assetID: "Citi-low_res-Double_Cash_2024")
 )]
 for card in newCards {
 container.mainContext.insert(card)
 }
 }
 
 if let wellsFargo = bank(withName: "Wells Fargo", in: container.mainContext) {
 let newCards = [
 CreditCard(
 name: "BILT",
 creditLimit: 16000,
 openDate: Calendar.current.date(byAdding: .year, value: Int(-1.5), to: Date.now) ?? Date.now,
 isBusiness: false,
 isChargeCard: false,
 annualFee: 0,
 lastDigits: "5852",
 bank: wellsFargo,
 promotions: [],
 bonuses: [],
 closed: nil,
 paymentProcessor: PaymentProcessor.visa,
 cardArt: CardArt(assetID: "Others-Credit_Cards-jpeg-Bilt")
 )]
 for card in newCards {
 container.mainContext.insert(card)
 }
 }
 
 
 return container
 } catch {
 fatalError("Failed to create container")
 }
}()



/** File: /Model/Bank.swift ***************************************/
import Foundation
import SwiftData
@Model
final class Bank {
 @Attribute(.unique) var name: String 
 @Relationship var creditCards: [CreditCard] = []
 @Relationship var cardArts: [CardArt] = []
 
 init(name: String) {
 self.name = name
 }
 
 static func returnNewBank() -> Bank {
 return Bank(name: "")
 }
 
 static let sampleData = [
 Bank(name: "Chace"),
 Bank(name: "American Express"),
 ]
 
}



/** File: /Model/Bonus.swift ***************************************/
import Foundation
import SwiftData
@Model
final class Bonus {
 var details: String
 var startDate: Date?
 var endDate: Date?
 var creditCard: CreditCard?
 
 init(details: String, startDate: Date? = nil, endDate: Date? = nil, creditCard: CreditCard? = nil) {
 self.details = details
 self.startDate = startDate
 self.endDate = endDate
 self.creditCard = creditCard
 }
 
 static func returnNewBonus() -> Bonus {
 return Bonus(details: "")
 }
 
 static let sampleData = [
 Bonus(details: "80k sign up bonus after $6,000 spend in 3 months", startDate: Date.now, endDate: Date.now.addingTimeInterval(60*60*24*30*3)),
 Bonus(details: "180k sign up bonus after $12,000 spend in 3 months", startDate: Date.now, endDate: Date.now.addingTimeInterval(60*60*24*30*3)),
 ]
}



/** File: /Model/CardArt.swift ***************************************/
import Foundation
import SwiftData
@Model
final class CardArt {
 var assetID: String
 @Relationship var bank: Bank?
 init(assetID: String, bank: Bank? = nil) {
 self.assetID = assetID
 self.bank = bank
 }
 
 static func returnNewCardArt() -> CardArt {
 return CardArt(assetID: "default")
 }
 
 static let sampleData = [
 CardArt(assetID: "American_Express-Personal-Platinum_Schwab"),
 CardArt(assetID: "American_Express-Personal-Platinum_Schwab")
 ]
 
}
extension CardArt {
 var bankName: String {
 bank?.name ?? "No Bank"
 }
}



/** File: /Model/Closed.swift ***************************************/
import Foundation
import SwiftData
@Model
final class Closed {
 var reason: String
 var closedDate: Date?
 var creditCard: CreditCard?
 init(reason: String, closedDate: Date? = nil, creditCard: CreditCard? = nil) {
 self.reason = reason
 self.closedDate = closedDate
 self.creditCard = creditCard
 }
 
 static func returnNewClosed() -> Closed {
 return Closed(reason: "")
 }
 
 static let sampleData = [
 Closed(reason: "Closed due to high annual fee", closedDate: Date.now),
 Closed(reason: "Closed due to inactivity", closedDate: Date.now),
 ]
}



/** File: /Model/CreditCard.swift ***************************************/
import Foundation
import SwiftData
import SwiftUI
@Model
final class CreditCard {
 var name: String
 var creditLimit: Double?
 var isBusiness: Bool
 var isChargeCard: Bool
 var annualFee: Double?
 var openDate: Date
 var lastDigits: String
 var history: [HistoryEntry]
 var bank: Bank?
 var promotions: [Promotion]
 var bonuses: [Bonus]
 var closed: Closed?
 var paymentProcessor: PaymentProcessor?
 var cardArt: CardArt?
 
 init(name: String,
 creditLimit: Double? = nil,
 openDate: Date,
 isBusiness: Bool,
 isChargeCard: Bool,
 annualFee: Double? = 0,
 lastDigits: String,
 history: [HistoryEntry] = [],
 bank: Bank? = nil,
 promotions: [Promotion] = [],
 bonuses: [Bonus] = [],
 closed: Closed? = nil,
 paymentProcessor: PaymentProcessor? = nil,
 cardArt: CardArt? = nil) {
 self.name = name
 self.creditLimit = creditLimit
 self.openDate = openDate
 self.isBusiness = isBusiness
 self.annualFee = annualFee
 self.lastDigits = lastDigits
 self.bank = bank
 self.promotions = promotions
 self.bonuses = bonuses
 self.closed = closed
 self.paymentProcessor = paymentProcessor
 self.history = history
 self.isChargeCard = isChargeCard
 self.cardArt = cardArt
 }
 
 
 
 static func returnNewCreditCard() -> CreditCard {
 return CreditCard(name: "", creditLimit: nil, openDate: .now, isBusiness: false, isChargeCard: false, lastDigits: "", history: [], cardArt: CardArt(assetID: "default"))
 }
 
 static func getHeight(width: Double) -> Double {
 return (width / 8.56) * 5.389
 }
 
 static func getWidth(height: Double) -> Double {
 return height * (8.56 / 5.389)
 }
 
 static let cardWidth: CGFloat = 486
 static let cardHeight: CGFloat = 306
 
 static let sampleData = [
 CreditCard(
 name: "Platinum",
 creditLimit: 110,
 openDate: .now,
 isBusiness: false,
 isChargeCard: false,
 lastDigits: "62376",
 history: [],
 bank: Bank(name: "American Express"),
 promotions: [
 Promotion(
 details: "0 APR",
 startDate: Date.now,
 endDate: Date.now.addingTimeInterval(60*60*24*30*12)
 )
 ],
 bonuses: [
 Bonus(
 details: "100k sign up bonus",
 startDate: Date.now,
 endDate: Date.now.addingTimeInterval(60*60*24*30*3)
 )
 ],
 closed: Closed(reason: "Too expensive"),
 paymentProcessor: PaymentProcessor.amex,
 cardArt: CardArt.sampleData[0]
 ),
 CreditCard(
 name: "Saphire Reserve",
 creditLimit: 3000,
 openDate: .now,
 isBusiness: false,
 isChargeCard: false,
 lastDigits: "3552",
 bank: Bank(name: "Chase"),
 promotions: [
 Promotion(
 details: "0 APR",
 startDate: Date.now,
 endDate: Date.now.addingTimeInterval(60*60*24*30*12)
 )
 ],
 bonuses: [
 Bonus(
 details: "70k sign up bonus",
 startDate: Date.now,
 endDate: Date.now.addingTimeInterval(60*60*24*30*12)
 )
 ],
 closed: Closed(reason: ""),
 paymentProcessor: PaymentProcessor.visa
 )
 ]
}
extension CreditCard {
 
 func deepCopy() -> CreditCard {
 return CreditCard(
 name: self.name,
 creditLimit: self.creditLimit,
 openDate: self.openDate,
 isBusiness: self.isBusiness,
 isChargeCard: self.isChargeCard,
 annualFee: self.annualFee,
 lastDigits: self.lastDigits
 )
 }
 
 
 var bankInstance: Bank? {
 return self.bank
 }
 
 var promotionsInstance: [Promotion] {
 return self.promotions
 }
 
 var bonusesInstance: [Bonus] {
 return self.bonuses
 }
 
 var closedInstance: Closed? {
 return self.closed
 }
 
 var paymentProcessorInstance: PaymentProcessor? {
 return self.paymentProcessor
 }
 
 var cardArtInstance: CardArt? {
 return self.cardArt
 }
}



/** File: /Model/HistoryEntry.swift ***************************************/
import Foundation
import SwiftData
@Model
final class HistoryEntry {
 var date: Date
 var entry: String
 
 init(date: Date, entry: String) {
 self.date = date
 self.entry = entry
 }
}



/** File: /Model/PaymentProcessor.swift ***************************************/
import Foundation
import SwiftData
@Model
final class PaymentProcessor {
 static let visa = PaymentProcessor(name: "Visa", logo: "visaLogo")
 static let mastercard = PaymentProcessor(name: "MasterCard", logo: "mastercardLogo")
 static let amex = PaymentProcessor(name: "Amex", logo: "amexLogo")
 static let discover = PaymentProcessor(name: "Discover", logo: "discoverLogo")
 var name: String
 var logo: String
 var creditCards: [CreditCard] = []
 
 init(name: String, logo: String) {
 self.name = name
 self.logo = logo
 }
 
 static func returnNewPaymentProcessor() -> PaymentProcessor {
 return PaymentProcessor(name: "", logo: "")
 }
 
 static let sampleData: [PaymentProcessor] = [
 PaymentProcessor(name: "Visa", logo: "visa_logo"),
 PaymentProcessor(name: "Mastercard", logo: "mastercard_logo"),
 PaymentProcessor(name: "American Express", logo: "amex_logo"),
 PaymentProcessor(name: "Discover", logo: "discover_logo")
 ]
}



/** File: /Model/PaymentProcessorInstances.swift ***************************************/

enum PaymentProcessorInstance {
 static let visa = PaymentProcessor(name: "Visa", logo: "visaLogo.png")
 static let mastercard = PaymentProcessor(name: "Mastercard", logo: "mastercardLogo.png")
 static let amex = PaymentProcessor(name: "Amex", logo: "amexLogo.png")
 static let discover = PaymentProcessor(name: "Discover", logo: "discoverLogo.png")
 static var all: [PaymentProcessor] {
 return [visa, mastercard, amex, discover]
 }
}



/** File: /Model/Promotion.swift ***************************************/
import Foundation
import SwiftData
@Model
final class Promotion {
 var details: String
 var startDate: Date?
 var endDate: Date?
 var creditCard: CreditCard?
 
 init(details: String, startDate: Date? = nil, endDate: Date? = nil, creditCard: CreditCard? = nil) {
 self.details = details
 self.startDate = startDate
 self.endDate = endDate
 self.creditCard = creditCard
 }
 
 static func returnNewPromotion() -> Promotion {
 return Promotion(details: "")
 }
 
 static let sampleData = [
 Promotion(details: "0% APR for 12 moths", startDate: Date.now, endDate: Date.now.addingTimeInterval(60*60*24*30*12)),
 Promotion(details: "0% APR for 18 moths", startDate: Date.now, endDate: Date.now.addingTimeInterval(60*60*24*30*18)),
 ]
}



/** File: /Model/SideBarCategories.swift ***************************************/
enum SideBarCategories: Hashable {
 case business
 case personal
 case all
 case closed
 case charts
 
 var displayName: String {
 switch self {
 case .business: return "Business"
 case .personal: return "Personal"
 case .all: return "All Cards"
 case .closed: return "Closed Cards"
 case .charts: return "Charts"
 }
 }
 
 var order: Int {
 switch self {
 
 case .all : return 1
 case .business: return 3
 case .personal: return 2
 case .closed: return 4
 case .charts: return 5
 }
 }
 
 var displayImageName: String {
 switch self {
 case .business:
 return "briefcase"
 case .personal:
 return "person"
 case .all:
 return "tray"
 case .closed:
 return "archivebox"
 case .charts:
 return "chart.line.uptrend.xyaxis"
 }
 }
 
 func sidebarFilter(_ creditCard: CreditCard) -> Bool {
 switch self {
 case .all:
 return creditCard.closed == nil
 case .personal:
 return !creditCard.isBusiness && creditCard.closed == nil
 case .business:
 return creditCard.isBusiness && creditCard.closed == nil
 case .closed:
 return creditCard.closed != nil
 case .charts:
 return false
 }
 }
}



/** File: /Model/loadBankCardArtData.swift ***************************************/
import Foundation
typealias BankCardArtData = [String: [String]]
func loadBankCardArtData() -> BankCardArtData? {
 let fileName = "BankCardArtData"
 
 guard let url = Bundle.main.url(forResource: fileName, withExtension: "json") else {
 print("Could not find \(fileName).json in the bundle.")
 return nil
 }
 
 do {
 
 let data = try Data(contentsOf: url)
 
 let decoded = try JSONDecoder().decode(BankCardArtData.self, from: data)
 return decoded
 } catch {
 print("Error decoding \(fileName).json: \(error)")
 return nil
 }
}



/** File: /Utilities/AppStorageKeys.swift ***************************************/
import Foundation
struct AppStorageKeys {
 static let menuBarShown = "menuBarShown"
}



/** File: /Utilities/PreviewData.swift ***************************************/
import Foundation
import SwiftData
@MainActor
class PreviewData {
 
 static let shared = PreviewData()
 
 let modelContainer: ModelContainer
 
 var context: ModelContext {
 modelContainer.mainContext
 }
 
 private init() {
 let schema = Schema([
 CreditCard.self,
 Bank.self,
 Promotion.self,
 Bonus.self,
 Closed.self,
 PaymentProcessor.self,
 CardArt.self
 ])
 
 let modelConfiguration = ModelConfiguration(schema: schema, isStoredInMemoryOnly: true)
 
 do {
 modelContainer = try ModelContainer(for: schema, configurations: [modelConfiguration])
 
 self.insertSampleData()
 
 } catch {
 fatalError("Could not create ModelContainer for SampleData: \(error)")
 }
 }
 
 
 func insertSampleData() {
 for card in CreditCard.sampleData {
 context.insert(card)
 }
 
 for promo in Promotion.sampleData {
 context.insert(promo)
 }
 
 for bank in Bank.sampleData {
 context.insert(bank)
 }
 
 for bonus in Bonus.sampleData {
 context.insert(bonus)
 }
 
 for closed in Closed.sampleData {
 context.insert(closed)
 }
 
 for pp in PaymentProcessor.sampleData {
 context.insert(pp)
 }
 
 for cardArt in CardArt.sampleData {
 context.insert(cardArt)
 }
 
 if let sampleCreditCard = CreditCard.sampleData.first {
 sampleCreditCard.bank = Bank.sampleData[1]
 sampleCreditCard.closed = Closed.sampleData[0]
 sampleCreditCard.bonuses.append(Bonus.sampleData[0])
 sampleCreditCard.closed = Closed.sampleData[0]
 }
 
 do {
 try context.save()
 } catch {
 print("Sample data context failed to save")
 }
 }
 
 
 
 var creditCard : CreditCard {
 CreditCard.sampleData[0]
 }
 
 var bank: Bank {
 Bank.sampleData[0]
 }
 
 var promotion: Promotion {
 Promotion.sampleData[0]
 }
 
 var bonus: Bonus {
 Bonus.sampleData[0]
 }
 
 var closed: Closed {
 Closed.sampleData[0]
 }
 
 var paymentProcessor: PaymentProcessor {
 PaymentProcessor.sampleData[0]
 }
 
 var openCategory = SideBarCategories.all
 var businessCategory = SideBarCategories.business
 var personalCategory = SideBarCategories.personal
 var closedCategory = SideBarCategories.closed
 
}



/** File: /Views/CardDetailViews/CardHistoryView.swift ***************************************/
import SwiftUI
struct CardHistoryView: View {
 @Bindable var creditCard: CreditCard
 
 var body: some View {
 VStack {
 HStack {
 if creditCard.history.isEmpty {
 Text("No history available")
 .font(.body)
 .padding(.vertical, 2)
 } else {
 List {
 ForEach(creditCard.history, id: \.self) { history in
 Text("\(history.date, style: .date) \(history.entry)")
 .font(.custom(
 "Menlo",
 fixedSize: 18))
 }
 }
 .clipShape(.rect(cornerRadius: 10))
 }
 Spacer()
 }
 .padding()
 Spacer()
 }
 .frame(minHeight: 100)
 }
}



/** File: /Views/CardDetailViews/DetailContentView.swift ***************************************/
import SwiftUI
struct DetailContentView: View {
 
 @Bindable var creditCard: CreditCard
 @State private var isShowingHistory: Bool = false
 
 
 var body: some View {
 VSplitView {
 DetailView(creditCard: creditCard)
 .scrollIndicatorsFlash(onAppear: true)
 if isShowingHistory {
 CardHistoryView(creditCard: creditCard)
 .frame(minHeight: 200, idealHeight:350, maxHeight: 500)
 }
 
 HistoryToggleView(isShowingHistory: $isShowingHistory)
 }
 }
}



/** File: /Views/CardDetailViews/DetailRowView.swift ***************************************/
import SwiftUI
struct DetailRowView: View {
 
 var label: String
 var value: String
 
 var body: some View {
 HStack{
 Text(label)
 Spacer()
 Text(value)
 }
 .padding()
 .frame(minWidth: 200, idealWidth: 400, alignment: .center)
 
 
 }
}



/** File: /Views/CardDetailViews/DetailView.swift ***************************************/
import SwiftUI
struct DetailView: View {
 
 @Bindable var creditCard: CreditCard
 
 @Environment(\.dismiss) private var dismiss
 @Environment(\.modelContext) private var modelContext
 
 init(creditCard: CreditCard) {
 self.creditCard = creditCard
 }
 
 var body: some View {
 ScrollView(.vertical, showsIndicators: false) {
 VStack {
 CardImageView(creditCard: creditCard)
 .padding()
 .shadow(color: Color.black.opacity(0.1), radius: 25)
 
 GroupBox {
 VStack{
 
 DetailRowView(label: "Card Name", value: creditCard.name)
 DetailRowView(label: "Type", value: creditCard.isBusiness ? "Business" : "Personal")
 
 if let limit = creditCard.creditLimit {
 DetailRowView(label: "Credit Limit", value: String(limit))
 }
 
 DetailRowView(label: "Charge Card", value: creditCard.isChargeCard ? "Yes" : "No")
 
 if creditCard.bank != nil {
 DetailRowView(label: "Bank Name", value: creditCard.bank?.name ?? "Bank is not specified")
 }
 
 if creditCard.closed != nil {
 DetailRowView(label: "Closed Reson", value: creditCard.closed?.reason ?? "Reason not specified")
 }
 }
 } label: {
 Label("Card Details", systemImage: "creditcard")
 .font(.headline)
 }
 .groupBoxStyle(ModernGroupBoxStyle())
 .padding(.horizontal)
 
 
 if !creditCard.bonuses.isEmpty {
 GroupBox {
 ForEach(creditCard.bonuses, id: \.self) { bonus in
 VStack{
 DetailRowView(label: "Bonus Details", value: bonus.details)
 DetailRowView(label: "Start Date", value: bonus.startDate?.description ?? "None")
 DetailRowView(label: "End Date", value: bonus.endDate?.description ?? "None")
 }
 }
 
 
 } label: {
 Label("Bonus", systemImage: "dollarsign.square")
 .font(.headline)
 
 }
 .groupBoxStyle(ModernGroupBoxStyle())
 .padding(.horizontal)
 }
 
 if !creditCard.promotions.isEmpty {
 GroupBox {
 ForEach(creditCard.promotions, id: \.self) { promo in
 VStack{
 DetailRowView(label: "Promotion Details", value: promo.details)
 DetailRowView(label: "Start Date", value: promo.startDate?.description ?? "None")
 DetailRowView(label: "End Date", value: promo.endDate?.description ?? "None")
 }
 }
 
 
 } label: {
 Label("Promotion", systemImage: "percent")
 .font(.headline)
 
 }
 .groupBoxStyle(ModernGroupBoxStyle())
 .padding(.horizontal)
 }
 Spacer()
 }
 .padding()
 }
 .navigationTitle("Credit Card Details")
 
 }
}
struct ModernGroupBoxStyle: GroupBoxStyle {
 func makeBody(configuration: Configuration) -> some View {
 VStack(alignment: .leading, spacing: 8) {
 configuration.label
 configuration.content
 .background(Color.grayDetailRow.opacity(0.2))
 .cornerRadius(8)
 .overlay(
 RoundedRectangle(cornerRadius: 8)
 .strokeBorder(Color.grayDetailRow.opacity(0.8)))
 }
 .padding()
 .background(Color(.background))
 .cornerRadius(12)
 .shadow(color: Color.black.opacity(0.05), radius: 5)
 
 }
}



/** File: /Views/CardDetailViews/HistoryToggleView.swift ***************************************/
import SwiftUI
struct HistoryToggleView: View {
 @Binding var isShowingHistory: Bool
 
 var body: some View {
 HStack {
 Spacer()
 Button(action: {
 isShowingHistory.toggle()
 }, label: {
 Text(isShowingHistory ? "Hide History" : "Show History")
 })
 .padding()
 }
 .frame(height: 35)
 }
 
}



/** File: /Views/CardViews/CardCellView.swift ***************************************/
import SwiftUI
struct CardCellView: View {
 let creditCard: CreditCard
 
 var body: some View {
 let w = 250.00
 let h = (w / 8.56) * 5.389
 
 VStack(alignment: .center, spacing: 8) {
 Image(creditCard.cardArt?.assetID ?? "default")
 .resizable()
 .interpolation(.low)
 .aspectRatio(contentMode: .fit)
 .frame(width: w, height: h)
 .clipShape(.rect(cornerRadius: 8))
 Text(creditCard.name)
 .font(.headline)
 .lineLimit(1)
 Text("Opened \(creditCard.openDate, style: .relative) ago")
 .font(.caption)
 .foregroundColor(.secondary)
 .font(.caption)
 .foregroundColor(.secondary)
 }
 .padding()
 .cornerRadius(8)
 .shadow(color: Color.black.opacity(0.1), radius: 2, x: 0, y: 2)
 }
}



/** File: /Views/CardViews/CardImageView.swift ***************************************/
import SwiftUI
struct CardImageView: View {
 @Bindable var creditCard: CreditCard
 
 init(creditCard: CreditCard) {
 self.creditCard = creditCard
 }
 
 var body: some View {
 let w = 300.00
 let h = (w / 8.56) * 5.389
 
 return ZStack{
 Image(creditCard.cardArt?.assetID ?? "default")
 .resizable()
 .interpolation(.low)
 .aspectRatio(contentMode: .fit)
 .frame(width: w, height: h)
 .clipShape(.rect(cornerRadius: 8))
 
 
 }
 }
}



/** File: /Views/CardViews/GridContentView.swift ***************************************/
import SwiftUI
import SwiftData
struct GridContentView: View {
 
 @Binding var selectedCategory: SideBarCategories
 @Binding var selectedCard: CreditCard?
 
 @Query(sort: \CreditCard.name) private var cards: [CreditCard]
 
 var filteredCreditCards: [CreditCard] {
 cards.filter(selectedCategory.sidebarFilter)
 }
 
 var onDoubleTap: (CreditCard) -> Void
 
 let columns: [GridItem] = [GridItem(.adaptive(minimum: 275, maximum: 350), spacing: 0)]
 
 var body: some View {
 ScrollView {
 LazyVGrid(columns: columns, spacing: 5) {
 ForEach(filteredCreditCards, id: \.id) { card in
 CardCellView(creditCard: card)
 .overlay(
 RoundedRectangle(cornerRadius: 8)
 .strokeBorder(selectedCard == card ? Color.accentColor.opacity(0.8) : Color.clear, lineWidth: 3)
 )
 .simultaneousGesture(
 TapGesture(count: 2)
 .onEnded {
 onDoubleTap(card)
 }
 )
 .simultaneousGesture(
 TapGesture(count: 1)
 .onEnded {
 DispatchQueue.main.async {
 selectedCard = card}
 }
 )
 }
 }
 .padding()
 }
 }
 init(searchString: String = "", 
 sortOrder: [SortDescriptor<CreditCard>] = [],
 selectedCard: Binding<CreditCard?>,
 selectedCategory: Binding<SideBarCategories>,
 onDoubleTap: @escaping (CreditCard) -> Void
 ) {
 _selectedCard = selectedCard
 _selectedCategory = selectedCategory
 self.onDoubleTap = onDoubleTap
 _cards = Query(filter: #Predicate { card in
 if searchString.isEmpty {
 return true
 } else {
 return card.name.localizedStandardContains(searchString)
 }
 }, sort: sortOrder)
 }
}



/** File: /Views/ChartViews/BankBreakdownChart.swift ***************************************/
import SwiftUI
import Charts
struct BankBreakdownChart: View {
 
 var banks: [Bank]
 
 var filteredBanks: [Bank] {
 banks.filter { !$0.creditCards.isEmpty }
 }
 
 
 let colors: [Color] = [.red, .blue, .green, .orange, .indigo]
 
 
 var totalCardCount: Int {
 filteredBanks.reduce(0) { $0 + $1.creditCards.filter { $0.closed == nil }.count }
 }
 var body: some View {
 VStack(alignment: .leading, spacing: 4) {
 Text("Open credit cards by bank")
 Text("Total cards: \(totalCardCount)")
 .fontWeight(.semibold)
 .font(.footnote)
 .foregroundColor(.secondary)
 .padding(.bottom, 12)
 Chart {
 
 ForEach(Array(filteredBanks.enumerated()), id: \.element.id) { index, bank in
 let openCount = bank.creditCards.filter { $0.closed == nil }.count
 SectorMark(
 angle: .value("Cards", openCount),
 innerRadius: .ratio(0.618),
 angularInset: 3
 )
 .foregroundStyle(colors[index % colors.count]).opacity(0.95)
 .cornerRadius(6)
 .annotation(position: .overlay, content: {
 Text(bank.name)
 .foregroundStyle(.primary)
 })
 }
 }
 .chartLegend(.hidden)
 .padding(.vertical)
 }
 }
}



/** File: /Views/ChartViews/BarChartView.swift ***************************************/
import SwiftUI
struct BarChartView<Content: View>: View {
 let content: Content
 
 init(@ViewBuilder content: () -> Content) {
 self.content = content()
 }
 
 var body: some View {
 content
 .frame(width: 350, height: 300, alignment: .center)
 .padding()
 .cornerRadius(12)
 .shadow(radius: 5)
 }
}



/** File: /Views/ChartViews/ChartsContentView.swift ***************************************/
import SwiftUI
import SwiftData
import Charts
struct ChartsContentView: View {
 
 @Query(sort: \CreditCard.openDate) private var cards: [CreditCard]
 @Query(sort: \Bank.name) private var banks: [Bank]
 
 let columns: [GridItem] = [GridItem(.adaptive(minimum: 375, maximum: 650), spacing: 50)]
 
 var body: some View {
 ScrollView {
 LazyVGrid(columns: columns, spacing: 20) {
 BarChartView {
 CreditLimitBreakdownChart(cards: cards)
 }
 BarChartView {
 CreditAgeChartView(cards: cards)
 }
 PieChartView {
 BankBreakdownChart(banks: banks)
 }
 }
 .padding()
 }
 }
}



/** File: /Views/ChartViews/CreditAgeChart.swift ***************************************/
import SwiftUI
import Charts
struct CreditAgeChartView: View {
 var cards: [CreditCard]
 
 
 var filteredCards: [CreditCard] {
 cards.filter { $0.closed == nil && !$0.isBusiness }
 }
 
 
 var totalCreditAge: Double {
 filteredCards.reduce(0.0) { sum, card in
 let ageInSeconds = Date().timeIntervalSince(card.openDate)
 let ageInYears = ageInSeconds / (365.25 * 24 * 3600)
 return sum + ageInYears
 }
 }
 
 
 var averageCreditAge: Double {
 filteredCards.isEmpty ? 0 : totalCreditAge / Double(filteredCards.count)
 }
 
 var body: some View {
 VStack(alignment: .leading, spacing: 4) {
 Text ("Credit age of personal cards")
 Text("Average: \(averageCreditAge.formatted(.number.precision(.fractionLength(1)))) years")
 .fontWeight(.semibold)
 .font(.footnote)
 .foregroundColor(.secondary)
 .padding(.bottom, 12)
 Chart {
 ForEach(Array(filteredCards.enumerated()), id: \.offset) { index, card in
 BarMark(
 x: .value("Card", index),
 y: .value("Card Age", Date().timeIntervalSince(card.openDate) / (365.25 * 24 * 3600))
 )
 .foregroundStyle(Color.purple.gradient)
 .cornerRadius(10)
 
 RuleMark(y: .value("Average", averageCreditAge))
 .foregroundStyle(Color.blue)
 .lineStyle(StrokeStyle(lineWidth: 2, dash: [5]))
 }
 }
 .padding(.vertical)
 .chartXAxis {
 AxisMarks { mark in
 }
 }
 .chartYAxis {
 AxisMarks { mark in
 AxisGridLine()
 AxisValueLabel()
 }
 }
 }
 }
}



/** File: /Views/ChartViews/CreditLimitBreakdownChart.swift ***************************************/
import SwiftUI
import Charts
struct CreditLimitBreakdownChart: View {
 var cards: [CreditCard]
 
 var filteredCards: [CreditCard] {
 cards.filter { $0.creditLimit ?? 0 > 0 }
 }
 
 var totalCreditLimit: Double {
 filteredCards.reduce(0) { $0 + ($1.creditLimit ?? 0) }
 }
 
 var averageCreditLimit: Double {
 let total = filteredCards.reduce(0) { $0 + ($1.creditLimit ?? 0) }
 return filteredCards.isEmpty ? 0 : total / Double(filteredCards.count)
 }
 
 var body: some View {
 VStack(alignment: .leading, spacing: 4) {
 Text ("Credit limits of all open cards")
 Text("Total: $\(totalCreditLimit.formatted(.number.precision(.fractionLength(0))))")
 .fontWeight(.semibold)
 .font(.footnote)
 .foregroundColor(.secondary)
 .padding(.bottom, 12)
 
 Chart {
 ForEach(Array(filteredCards.enumerated()), id: \.offset) { index, card in
 BarMark(
 x: .value("Card", index),
 y: .value("Credit Limit", card.creditLimit ?? 0)
 )
 .foregroundStyle(Color.pink.gradient)
 .cornerRadius(10)
 
 RuleMark(y: .value("Average", averageCreditLimit))
 .foregroundStyle(Color.blue)
 .lineStyle(StrokeStyle(lineWidth: 2, dash: [5]))
 }
 }
 .padding(.vertical)
 .chartXAxis {
 AxisMarks { mark in
 }
 }
 .chartYAxis {
 AxisMarks { mark in
 AxisGridLine()
 AxisValueLabel()
 }
 }
 }
 }
}



/** File: /Views/ChartViews/PieChartView.swift ***************************************/
import SwiftUI
struct PieChartView<Content: View>: View {
 let content: Content
 
 init(@ViewBuilder content: () -> Content) {
 self.content = content()
 }
 
 var body: some View {
 content
 .frame(width: 350, height: 400, alignment: .center)
 .padding()
 .cornerRadius(12)
 .shadow(radius: 5)
 }
}



/** File: /Views/Form/AddBankView.swift ***************************************/
import SwiftUI
struct AddBankView: View {
 @Environment(\.dismiss) private var dismiss
 @State private var bankName: String = ""
 
 var onSave: (Bank) -> Void
 
 var body: some View {
 Form {
 CustomTextField(title: "Bank Name", text: $bankName, width: .infinity, prompt: "Charles Schwab", borderColor: .accent)
 
 }
 .toolbar {
 ToolbarItem(placement: .confirmationAction) {
 Button("Add Bank") {
 let newBank = Bank(name: bankName)
 
 onSave(newBank)
 bankName = ""
 dismiss()
 }
 .disabled(bankName.isEmpty)
 }
 ToolbarItem(placement: .cancellationAction) {
 Button("Cancel") {
 dismiss()
 }
 }
 }
 .formStyle(.grouped)
 .padding()
 .frame(width: 500)
 }
}



/** File: /Views/Form/AddBonusView.swift ***************************************/
import SwiftUI
struct AddBonusView: View {
 @Environment(\.dismiss) private var dismiss
 @State private var bonusName: String = ""
 @State private var startDate: Date = .now
 @State private var endDate: Date = Date.now.addingTimeInterval(60*60*24*30*3)
 
 var onSave: (Bonus) -> Void
 
 var body: some View {
 
 Form {
 CustomTextField(title: "Bonus Details", text: $bonusName, width: .infinity, prompt: "$200 cash back after spending $1,000 in the first 3 months")
 
 DatePicker("Start Date", selection: $startDate, displayedComponents: .date)
 .datePickerStyle(.compact)
 
 DatePicker("End Date", selection: $endDate, displayedComponents: .date)
 .datePickerStyle(.compact)
 }
 .padding()
 .formStyle(.grouped)
 
 .toolbar {
 ToolbarItem(placement: .confirmationAction) {
 Button("Add Bonus") {
 let newBonus = Bonus(details: bonusName)
 
 onSave(newBonus)
 bonusName = ""
 dismiss()
 }
 .disabled(bonusName.isEmpty)
 
 }
 ToolbarItem(placement: .cancellationAction) {
 Button("Cancel") {
 dismiss()
 }
 
 }
 }
 .frame(width: 500)
 }
 
}



/** File: /Views/Form/AddPromotionView.swift ***************************************/
import SwiftUI
struct AddPromotionView: View {
 @Environment(\.dismiss) private var dismiss
 @State private var promoName: String = ""
 @State private var startDate: Date = .now
 @State private var endDate: Date = Date.now.addingTimeInterval(60*60*24*30*12)
 
 var onSave: (Promotion) -> Void
 
 var body: some View {
 Form {
 CustomTextField(title: "Promotion Details", text: $promoName, width: .infinity, prompt: "0% APR for 12 months on purchases and balance transfers", borderColor: .accent)
 
 DatePicker("Start Date", selection: $startDate, displayedComponents: .date)
 .datePickerStyle(.compact)
 DatePicker("End Date", selection: $endDate, displayedComponents: .date)
 .datePickerStyle(.compact)
 
 }
 .formStyle(.grouped)
 .toolbar {
 ToolbarItem(placement: .confirmationAction) {
 Button("Add Promotion") {
 let newPromo = Promotion(details: promoName)
 
 onSave(newPromo)
 promoName = ""
 dismiss()
 }
 .disabled(promoName.isEmpty)
 }
 
 ToolbarItem(placement: .cancellationAction) {
 Button("Cancel") {
 dismiss()
 }
 }
 }
 .frame(width: 500)
 
 }
}



/** File: /Views/Form/CardImagePickerView.swift ***************************************/
import SwiftUI
import SwiftData
struct CardImagePickerView: View {
 @Binding var selectedCardArt: CardArt?
 
 @Environment(\.dismiss) var dismiss
 
 @Query var cardArts: [CardArt]
 
 var groupedCardArts: [String: [CardArt]] {
 let sortedCardArts = cardArts.sorted { $0.bankName < $1.bankName }
 return Dictionary(grouping: sortedCardArts, by: { $0.bankName })
 }
 
 let columns: [GridItem] = [
 GridItem(.flexible(), spacing: 5),
 GridItem(.flexible(), spacing: 5),
 GridItem(.flexible(), spacing: 5),
 GridItem(.flexible(), spacing: 5)
 ]
 
 var body: some View {
 NavigationStack {
 List {
 ForEach(groupedCardArts.keys.sorted(), id: \.self) { bankName in
 Section {
 LazyVGrid(columns: columns) {
 ForEach(groupedCardArts[bankName] ?? [], id: \.assetID) { cardArt in
 Image(cardArt.assetID)
 .resizable()
 .aspectRatio(contentMode: .fit)
 .frame(width: 150)
 .padding(.vertical, 5)
 .clipShape(.rect(cornerRadius: 12))
 .onTapGesture {
 selectedCardArt = cardArt
 dismiss()
 }
 }
 }
 } header: {
 CardImagePickerSectionHeaderView(bankName: bankName)
 }
 }
 }
 .navigationTitle("Select Card Art")
 }
 .toolbar {
 ToolbarItem(placement: .cancellationAction){
 Button("Cancel"){
 dismiss()
 }
 }
 
 }
 }
}



/** File: /Views/Form/CloseCardView.swift ***************************************/
import SwiftUI
struct CloseCardView: View {
 @Environment(\.dismiss) private var dismiss
 @State private var closedReason: String = ""
 
 var onSave: (Closed) -> Void
 
 var body: some View {
 Form {
 CustomTextField(title: "Closed Reason", text: $closedReason, width: .infinity, prompt: "Did not want to pay the annual fee")
 }
 .toolbar {
 ToolbarItem(placement: .confirmationAction) {
 Button("Close Card") {
 let newReason = Closed(reason: closedReason)
 
 onSave(newReason)
 closedReason = ""
 dismiss()
 }
 .disabled(closedReason.isEmpty)
 
 }
 ToolbarItem(placement: .cancellationAction){
 Button("Cancel") {
 dismiss()
 }
 }
 }
 .formStyle(.grouped)
 .frame(width: 500)
 }
}



/** File: /Views/Form/FormAddView.swift ***************************************/
import SwiftUI
import SwiftData
struct FormAddView: View {
 @Environment(\.dismiss) private var dismiss
 @Environment(\.modelContext) private var modelContext
 
 @Query(sort: [SortDescriptor(\Bank.name, order: .forward)]) var existingBanks: [Bank]
 @Query(sort: [SortDescriptor(\PaymentProcessor.name, order: .forward)]) var paymentProcessors: [PaymentProcessor]
 
 @State var creditCard: CreditCard = CreditCard.returnNewCreditCard()
 @State var bank: Bank? = nil
 @State var promotions: [Promotion] = []
 @State var bonuses: [Bonus] = []
 @State var closed: Closed? = nil
 @State var cardArt: CardArt? = nil
 @State var paymentProcessor: PaymentProcessor? = PaymentProcessor.returnNewPaymentProcessor()
 
 
 var body: some View {
 VStack {
 FormView(creditCard: $creditCard,
 bank: $bank,
 promotions: $promotions,
 bonuses: $bonuses,
 closed: $closed,
 cardArt: $cardArt,
 paymentProcessor: $paymentProcessor,
 existingBanks: existingBanks,
 paymentProcessors: paymentProcessors)
 .toolbar {
 ToolbarItem(placement: .confirmationAction) {
 Button("Add Card") {
 creditCard.bank = bank
 creditCard.promotions = promotions
 creditCard.bonuses = bonuses
 creditCard.closed = closed
 creditCard.cardArt = cardArt
 creditCard.paymentProcessor = paymentProcessor
 creditCard.history.append(HistoryEntry(date: .now, entry: "\(creditCard.name) was added"))
 
 modelContext.insert(creditCard)
 
 try? modelContext.save()
 dismiss()
 }
 .disabled(creditCard.name.isEmpty || bank == nil)
 }
 ToolbarItem(placement: .cancellationAction) {
 Button("Discard") {
 modelContext.delete(creditCard)
 dismiss()
 }
 }
 }
 .onAppear {
 creditCard = CreditCard.returnNewCreditCard()
 }
 }
 }
}



/** File: /Views/Form/FormEditView.swift ***************************************/
import SwiftUI
import SwiftData
struct FormEditView: View {
 @Environment(\.dismiss) var dismiss
 @Environment(\.modelContext) var modelContext
 
 @State var creditCard: CreditCard
 @State private var editedCreditCard: CreditCard
 @State private var editedBank: Bank?
 @State private var editedCardArt: CardArt?
 @State private var editedPromotions: [Promotion]
 @State private var editedBonuses: [Bonus]
 @State private var editedClosed: Closed?
 @State private var editedPaymentProcessor: PaymentProcessor?
 
 @Query(sort: [SortDescriptor(\Bank.name, order: .forward)]) var existingBanks: [Bank]
 @Query(sort: [SortDescriptor(\PaymentProcessor.name, order: .forward)]) var paymentProcessors: [PaymentProcessor]
 
 init(creditCard: CreditCard) {
 _creditCard = State(initialValue: creditCard)
 _editedCreditCard = State(initialValue: creditCard.deepCopy())
 _editedBank = State(initialValue: creditCard.bankInstance)
 _editedCardArt = State(initialValue: creditCard.cardArtInstance)
 _editedPromotions = State(initialValue: creditCard.promotionsInstance)
 _editedBonuses = State(initialValue: creditCard.bonusesInstance)
 _editedClosed = State(initialValue: creditCard.closedInstance)
 }
 
 var body: some View {
 VStack {
 FormView(creditCard: $editedCreditCard,
 bank: $editedBank,
 promotions: $editedPromotions,
 bonuses: $editedBonuses,
 closed: $editedClosed,
 cardArt: $editedCardArt,
 paymentProcessor: $editedPaymentProcessor,
 existingBanks: existingBanks,
 paymentProcessors: paymentProcessors)
 .toolbar {
 ToolbarItem(placement: .confirmationAction) {
 Button("Done") {
 applyEdits()
 dismiss()
 }
 .disabled(editedCreditCard.name.isEmpty || editedBank == nil || editedCreditCard.lastDigits.isEmpty)
 }
 }
 }
 }
 
 private func applyEdits() {
 
 if creditCard.name != editedCreditCard.name {
 creditCard.history.append(HistoryEntry(date: .now, entry: "Name changed from '\(creditCard.name)' to '\(editedCreditCard.name)'") )
 creditCard.name = editedCreditCard.name
 }
 
 
 if creditCard.creditLimit != editedCreditCard.creditLimit {
 creditCard.history.append(HistoryEntry(date: .now, entry: "Credit limit changed from '\(String(describing: creditCard.creditLimit))' to '\(String(describing: editedCreditCard.creditLimit))'"))
 creditCard.creditLimit = editedCreditCard.creditLimit
 }
 
 
 if creditCard.openDate != editedCreditCard.openDate {
 creditCard.history.append(HistoryEntry(date: .now, entry: "Open date changed from '\(creditCard.openDate)' to '\(editedCreditCard.openDate)'"))
 creditCard.openDate = editedCreditCard.openDate
 }
 
 
 if creditCard.isBusiness != editedCreditCard.isBusiness {
 creditCard.history.append(HistoryEntry(date: .now, entry: "Business status changed from '\(creditCard.isBusiness)' to '\(editedCreditCard.isBusiness)'"))
 creditCard.isBusiness = editedCreditCard.isBusiness
 }
 
 
 if creditCard.isChargeCard != editedCreditCard.isChargeCard {
 creditCard.history.append(HistoryEntry(date: .now, entry: "Charge card status changed from '\(creditCard.isChargeCard)' to '\(editedCreditCard.isChargeCard)'"))
 creditCard.isChargeCard = editedCreditCard.isChargeCard
 }
 
 
 if creditCard.annualFee != editedCreditCard.annualFee {
 creditCard.history.append(HistoryEntry(date: .now, entry: "Annual fee changed from '\(String(describing: creditCard.annualFee))' to '\(String(describing: editedCreditCard.annualFee))'"))
 creditCard.annualFee = editedCreditCard.annualFee
 }
 
 
 if creditCard.lastDigits != editedCreditCard.lastDigits {
 creditCard.history.append(HistoryEntry(date: .now, entry: "Last digits changed from '\(creditCard.lastDigits)' to '\(editedCreditCard.lastDigits)'"))
 creditCard.lastDigits = editedCreditCard.lastDigits
 }
 
 
 if creditCard.bank?.name != editedBank?.name {
 let oldBank = creditCard.bank?.name ?? "nil"
 let newBank = editedBank?.name ?? "nil"
 creditCard.history.append(HistoryEntry(date: .now, entry: "Bank changed from '\(oldBank)' to '\(newBank)'"))
 creditCard.bank = editedBank
 }
 
 
 if creditCard.promotions.count != editedPromotions.count {
 creditCard.history.append(HistoryEntry(date: .now, entry: "Promotions updated"))
 }
 creditCard.promotions = editedPromotions
 
 
 if creditCard.bonuses.count != editedBonuses.count {
 creditCard.history.append(HistoryEntry(date: .now, entry: "Bonuses updated"))
 }
 creditCard.bonuses = editedBonuses
 
 
 if creditCard.closed?.reason != editedClosed?.reason {
 let oldClosed = creditCard.closed?.reason ?? "nil"
 let newClosed = editedClosed?.reason ?? "nil"
 creditCard.history.append(HistoryEntry(date: .now, entry: "Closed reason changed from '\(oldClosed)' to '\(newClosed)'"))
 creditCard.closed = editedClosed
 }
 
 
 if creditCard.paymentProcessor != editedPaymentProcessor {
 creditCard.history.append(HistoryEntry(date: .now, entry: "Payment processor changed from '\(String(describing: creditCard.paymentProcessor))' to '\(String(describing: editedPaymentProcessor))'"))
 creditCard.paymentProcessor = editedPaymentProcessor
 }
 
 
 if creditCard.cardArt?.assetID != editedCardArt?.assetID {
 let oldArt = creditCard.cardArt?.assetID ?? "nil"
 let newArt = editedCardArt?.assetID ?? "nil"
 creditCard.history.append(HistoryEntry(date: .now, entry: "Card art changed from '\(oldArt)' to '\(newArt)'"))
 creditCard.cardArt = editedCardArt
 }
 
 try? modelContext.save()
 }
}



/** File: /Views/Form/FormHelpers/CardImagePickerSectionHeaderView.swift ***************************************/
import SwiftUI
struct CardImagePickerSectionHeaderView: View {
 
 @State var bankName: Dictionary<String, [CardArt]>.Keys.Element
 
 var body: some View {
 Text(bankName)
 .frame(maxWidth: .infinity)
 .frame(height: 50)
 .font(.title)
 }
}



/** File: /Views/Form/FormHelpers/CustomDatePicker.swift ***************************************/
import SwiftUI
struct CustomDatePicker: View {
 
 var title: String
 @Binding var selection: Date
 var width : CGFloat
 var color : Color = .white
 var startDate: Date = .distantPast
 var endDate: Date = .now
 var borderColor : Color = .gray
 
 var body: some View {
 HStack(alignment: .center, spacing: 4) {
 CustomText(text: title)
 DatePicker(title, selection: $selection, 
 in: startDate...endDate, 
 displayedComponents: .date
 )
 .labelsHidden()
 .datePickerStyle(.stepperField)
 .focusable(false)
 .focusEffectDisabled(true)
 .padding(.vertical, 5)
 }
 .padding(.trailing, 10)
 }
}



/** File: /Views/Form/FormHelpers/CustomNumberField.swift ***************************************/
import SwiftUI
struct CustomNumberField: View {
 var title: String
 @Binding var number: Double?
 var width : CGFloat
 var color : Color = .white
 var prompt : String = "Optional"
 var borderColor : Color = .white
 var variable : Bool = true
 
 var body: some View {
 VStack(alignment: .leading, spacing: 4) {
 CustomText(text: title, color: color)
 TextField("", value: $number, format: .number, prompt: Text(prompt))
 .background(
 RoundedRectangle(cornerRadius: 8)
 .stroke(number == nil && variable ? borderColor : Color.white, lineWidth: 0.5)
 .disableAutocorrection(true)
 .frame(height: .infinity)
 
 )
 }
 .frame(width: width, height: 55)
 }
}



/** File: /Views/Form/FormHelpers/CustomPicker.swift ***************************************/
import SwiftUI
struct CustomPicker: View {
 var title: String
 var options: [Bank]
 @Binding var selection: Bank?
 @Binding var isNewBank: Bool
 var width: CGFloat
 var textColor: Color = .primary
 var borderColor: Color = .gray
 
 var body: some View {
 VStack(alignment: .leading, spacing: 4) {
 
 CustomText(text: "Bank")
 
 HStack {
 Spacer()
 Picker(title, selection: $selection) {
 Text(title)
 .tag(Optional<Bank>(nil))
 ForEach(options) { bank in
 Text(bank.name).tag(Optional(bank))
 }
 }
 .frame(height: 35)
 .frame(width: .infinity)
 .labelsHidden()
 .pickerStyle(.menu)
 Button {
 isNewBank.toggle()
 }label: {
 Image(systemName: "plus")
 }
 .buttonStyle(.plain)
 .padding(.trailing, 10)
 }
 .background(
 RoundedRectangle(cornerRadius: 8)
 .stroke(selection != nil ? Color.white : borderColor, lineWidth: 0.5)
 .frame(height: .infinity)
 
 .disableAutocorrection(true)
 )
 }
 .frame(width: width, height: 55)
 
 }
}



/** File: /Views/Form/FormHelpers/CustomText.swift ***************************************/
import SwiftUI
struct CustomText: View {
 
 var text: String
 var color: Color = .white
 
 var body: some View {
 Text(text)
 .font(.callout)
 .foregroundColor(color)
 }
}



/** File: /Views/Form/FormHelpers/CustomTextField.swift ***************************************/
import SwiftUI
struct CustomTextField: View {
 var title: String
 @Binding var text: String
 var width : CGFloat
 var color : Color = .white
 var prompt : String = "Optional"
 var borderColor : Color = .white
 var variable : Bool = true
 
 var body: some View {
 VStack(alignment: .leading, spacing: 4) {
 CustomText(text: title, color: color)
 TextField("", text: $text, prompt: Text(prompt))
 .background(
 RoundedRectangle(cornerRadius: 8)
 .stroke(text.isEmpty && variable ? borderColor : Color.white, lineWidth: 0.5)
 .disableAutocorrection(true)
 .frame(height: .infinity)
 
 )
 }
 .frame(width: width, height: 55)
 }
}



/** File: /Views/Form/FormHelpers/CustomToggle.swift ***************************************/
import SwiftUI
struct CustomToggle: View {
 var title: String
 @Binding var isOn: Bool
 var width: CGFloat
 var textColor: Color = .white
 var borderColor: Color = .gray
 
 var body: some View {
 HStack {
 Toggle("", isOn: $isOn)
 .labelsHidden()
 .toggleStyle(.checkbox)
 CustomText(text: title)
 .frame(alignment: .leading)
 }
 .frame(width: width, height: 55, alignment: .leading)
 }
}



/** File: /Views/Form/FormView.swift ***************************************/
import SwiftUI
import SwiftData
struct FormView: View {
 @Environment(\.dismiss) var dismiss
 @Environment(\.modelContext) var modelContext
 
 @Binding var creditCard: CreditCard
 @Binding var bank: Bank?
 @Binding var promotions: [Promotion]
 @Binding var bonuses: [Bonus]
 @Binding var closed: Closed?
 @Binding var cardArt: CardArt?
 @Binding var paymentProcessor: PaymentProcessor?
 
 
 @State var isNewBank: Bool = false
 @State var isNewPromo: Bool = false
 @State var isNewBonus: Bool = false
 @State var isClosed: Bool = false
 
 var existingBanks: [Bank]
 var paymentProcessors: [PaymentProcessor]
 
 @State private var showCardArtPicker: Bool = false
 
 var body: some View {
 ScrollView {
 Form {
 Section("Card Details") {
 
 
 
 
 
 
 HStack {
 
 VStack {
 HStack {
 Spacer()
 SelectCardImageView(cardArt: $cardArt, isShowingImagePicker: $showCardArtPicker)
 Spacer()
 }
 HStack {
 CustomTextField(title: "Card Name", text: $creditCard.name, width: .infinity, prompt: "Sapphire Reserve", borderColor: .accent)
 CustomNumberField(title: "Annual Fee", number: $creditCard.annualFee, width: 200, prompt: "$495", borderColor: .accent)
 
 
 }
 
 
 
 HStack {
 CustomNumberField(title: "Credit Limit",
 number: $creditCard.creditLimit,
 width: 225,
 prompt: creditCard.isChargeCard ? "Not Applicable to Charge Cards" : "$24,000",
 borderColor: .accent,
 variable: !creditCard.isChargeCard
 
 )
 .disabled(creditCard.isChargeCard)
 CustomTextField(title: "Last 4-5 Digits", text: $creditCard.lastDigits, width: .infinity, prompt: "**** **** **** 5032", borderColor: .accent)
 
 HStack {
 CustomPicker(title: "Select Bank", options: existingBanks, selection: $bank, isNewBank: $isNewBank, width: 175, borderColor: .accent)
 }
 
 }
 HStack {
 CustomDatePicker(title: "Open Date", selection: $creditCard.openDate, width: 0)
 CustomToggle(title: "Charge Card", isOn: $creditCard.isChargeCard, width: 100)
 CustomToggle(title: "Business", isOn: $creditCard.isBusiness, width: 100)
 
 Spacer()
 
 
 }
 .padding(.top, 10)
 
 
 
 
 }
 
 }
 .padding(.vertical, 10)
 .padding(.horizontal, 10)
 
 }
 
 Section("Promotions") {
 ForEach(promotions){promo in
 HStack {
 Text(promo.details)
 }
 }
 HStack {
 Spacer()
 Button {
 isNewPromo.toggle()
 } label: {
 Image(systemName: "plus")
 }
 .buttonStyle(.plain)
 }
 
 }
 
 Section("Bonuses") {
 ForEach(bonuses){bonus in
 HStack {
 Text(bonus.details)
 }
 }
 HStack {
 Spacer()
 Button {
 isNewBonus.toggle()
 } label: {
 Image(systemName: "plus")
 }
 .buttonStyle(.plain)
 }
 
 }
 
 Section("Card Status") {
 
 
 if let close = closed?.reason {
 HStack {
 Text("Closed: \(close)")
 Spacer()
 Button {
 closed = nil
 } label: {
 Label("Open Card", systemImage: "archivebox.fill")
 .labelStyle(.titleOnly)
 
 }
 .buttonStyle(.plain)
 }
 } else {
 HStack {
 Text("Active")
 Spacer()
 Button {
 isClosed.toggle()
 } label: {
 Label("Close Card", systemImage: "archivebox.fill")
 .labelStyle(.titleOnly)
 
 }
 .buttonBorderShape(.roundedRectangle)
 
 }
 }
 
 
 }
 
 
 }
 .formStyle(.grouped)
 }
 .sheet(isPresented: $showCardArtPicker) {
 CardImagePickerView(selectedCardArt: $cardArt)
 .frame(width: 700, height: 650)
 }
 .sheet(isPresented: $isNewBank) {
 AddBankView() { newBank in
 modelContext.insert(newBank)
 bank = newBank
 }
 }
 .sheet(isPresented: $isNewPromo) {
 AddPromotionView() { newPromo in
 promotions.append(newPromo)
 }
 }
 .sheet(isPresented : $isNewBonus) {
 AddBonusView() { newBonus in
 bonuses.append(newBonus)
 }
 }
 .sheet(isPresented : $isClosed) {
 CloseCardView() { newClosed in
 closed = newClosed
 }
 }
 }
}



/** File: /Views/Form/SelectCardImageView.swift ***************************************/
import SwiftUI
struct SelectCardImageView: View {
 @Binding var cardArt: CardArt?
 @Binding var isShowingImagePicker: Bool
 
 var body: some View {
 let h = 175.0
 let w = h * (8.56 / 5.389)
 
 
 HStack {
 Spacer()
 Button(action: {
 isShowingImagePicker.toggle()
 }) {
 Group {
 if let cardArt = cardArt {
 Image(cardArt.assetID)
 .resizable()
 .scaledToFit()
 .clipShape(RoundedRectangle(cornerRadius: 8))
 .frame(height: h)
 } else {
 
 Color.black.opacity(0.02)
 .frame(width: w, height: h)
 .clipShape(RoundedRectangle(cornerRadius: 8))
 .foregroundColor(.gray)
 
 .overlay(alignment: .center, content: {
 Text("Select Card Image")
 .font(.headline)
 .foregroundColor(.secondary)
 .frame(width: w, height: h)
 .frame(maxWidth: .infinity)
 .background(Color.black.opacity(0.3))
 .clipShape(RoundedRectangle(cornerRadius: 8))
 }
 )
 }
 }
 }
 .shadow(color: .black.opacity(0.1), radius: 5)
 .buttonStyle(BouncyDarkenButtonStyle())
 Spacer()
 }
 .frame(width: w, height:200)
 }
}
struct BouncyDarkenButtonStyle: ButtonStyle {
 func makeBody(configuration: Configuration) -> some View {
 configuration.label
 .overlay(
 Color.black
 .opacity(configuration.isPressed ? 0.3 : 0)
 .clipShape(RoundedRectangle(cornerRadius: 8))
 )
 }
}



/** File: /Views/ManuBar/MenuBarContentView.swift ***************************************/
import SwiftUI
import SwiftData
import AppKit
struct MenuBarContentView: View {
 @Environment(\.openWindow) private var openWindow
 
 @Query(sort: [SortDescriptor(\Bank.name, order: .forward)]) var existingBanks: [Bank]
 @Query(sort: [SortDescriptor(\PaymentProcessor.name, order: .forward)]) var paymentProcessors: [PaymentProcessor]
 
 @Environment(\.modelContext) private var modelContext
 
 var body: some View {
 VStack {
 Button(action: {
 openWindow(id: "AddCreditCardWindow")
 }) {
 Label("New Credit Card", systemImage: "plus")
 .labelStyle(.titleAndIcon)
 }
 Section {
 Button("Quit Wallet App") {
 NSApplication.shared.terminate(nil)
 }
 }
 }
 .padding()
 }
}



/** File: /Views/NaviationViews/MainContentView.swift ***************************************/
import SwiftUI
import SwiftData
struct MainContentView: View {
 @Binding var selectedCategory: SideBarCategories
 @Binding var columnVisibility: NavigationSplitViewVisibility
 
 @State private var sortOrder = [SortDescriptor(\CreditCard.openDate, order: .reverse)]
 @State private var searchText: String = ""
 @State private var selectedCard: CreditCard?
 @State private var newCard: Bool = false
 @State private var isEditing: Bool = false
 @State private var toggleHelper = true
 @State private var navigationPath = NavigationPath()
 @State private var cardToDelete: CreditCard?
 
 @Query(sort: [SortDescriptor(\Bank.name, order: .forward)]) var existingBanks: [Bank]
 @Query(sort: [SortDescriptor(\PaymentProcessor.name, order: .forward)]) var paymentProcessors: [PaymentProcessor]
 
 @Environment(\.modelContext) private var modelContext
 @Environment(\.dismiss) private var dismiss
 
 var body: some View {
 NavigationSplitView(columnVisibility: $columnVisibility) {
 SidebarView(selectedCategory: $selectedCategory)
 .toolbar(removing: .sidebarToggle)
 .toolbar {
 ToolbarItem(placement: .primaryAction) {
 Button(action: {
 toggleSidebar()
 }) {
 Label("Toggle Sidebar", systemImage: "sidebar.leading")
 .imageScale(.large)
 }
 }
 }
 .navigationSplitViewColumnWidth(min: 150, ideal: 150, max: 250)
 } detail: {
 NavigationStack(path: $navigationPath) {
 Group {
 if selectedCategory == SideBarCategories.charts {
 ChartsContentView()
 } else {
 GridContentView(searchString: searchText,
 sortOrder: sortOrder,
 selectedCard: $selectedCard,
 selectedCategory: $selectedCategory,
 onDoubleTap: { card in
 withAnimation(.spring()) {
 navigationPath.append(card)
 }
 })
 }
 }
 .searchable(text: $searchText, placement: .toolbar, prompt: "search")
 .navigationDestination(for: CreditCard.self) { card in
 ZStack {
 Color(NSColor.windowBackgroundColor)
 DetailContentView(creditCard: card)
 .background(Color(.background))
 .navigationBarBackButtonHidden(true)
 .toolbar {
 ToolbarItem(placement: .navigation) {
 Button {
 withAnimation(.spring()) {
 navigationPath.removeLast()
 }
 } label: {
 Label("Back", systemImage: "chevron.left")
 .imageScale(.large)
 }
 }
 }
 }
 }
 }
 .background(Color(.background))
 .navigationSplitViewColumnWidth(min: 350, ideal: 400)
 }
 .toolbar {
 ToolbarItemGroup(placement: .automatic) {
 Menu("Sort", systemImage: "arrow.up.arrow.down") {
 Picker("Open Date", selection: $sortOrder) {
 Text("Newest").tag([SortDescriptor(\CreditCard.openDate, order: .reverse)])
 Text("Oldest").tag([SortDescriptor(\CreditCard.openDate)])
 }
 .imageScale(.large)
 
 Picker("Credit Limit", selection: $sortOrder) {
 Text("Highest").tag([SortDescriptor(\CreditCard.creditLimit, order: .reverse)])
 Text("Lowest").tag([SortDescriptor(\CreditCard.creditLimit)])
 }
 .imageScale(.large)
 
 Picker("Name", selection: $sortOrder) {
 Text("A-Z").tag([SortDescriptor(\CreditCard.name)])
 Text("Z-A").tag([SortDescriptor(\CreditCard.name, order: .reverse)])
 }
 .imageScale(.large)
 }
 .disabled(!navigationPath.isEmpty)
 
 Button(action: addCard) {
 Label("Add Card", systemImage: "plus")
 .imageScale(.large)
 }
 .disabled(!navigationPath.isEmpty)
 
 Button(action: toggleEditing) {
 Label("Edit", systemImage: "square.and.pencil")
 .imageScale(.large)
 }
 .disabled(selectedCard == nil)
 
 Button(action: {
 if let selected = selectedCard {
 cardToDelete = selected
 }
 }) {
 Label("Delete", systemImage: "trash")
 .imageScale(.large)
 }
 .disabled(selectedCard == nil)
 }
 }
 .alert(item: $cardToDelete) { card in
 Alert(
 title: Text("Delete Card"),
 message: Text("Are you sure you want to delete \(card.name)?"),
 primaryButton: .destructive(Text("Delete")) {
 deleteCard(card)
 },
 secondaryButton: .cancel()
 )
 }
 .sheet(isPresented: $isEditing) {
 if let selectedCard = selectedCard {
 FormEditView(
 creditCard: selectedCard
 )
 .frame(width: 700, height: 500, alignment: .center)
 }
 }
 .sheet(isPresented: $newCard) {
 FormAddView()
 .frame(width: 700, height: 500, alignment: .center)
 }
 }
 
 private func toggleSidebar() {
 withAnimation {
 toggleHelper.toggle()
 columnVisibility = toggleHelper ? .all : .detailOnly
 }
 }
 
 private func addCard() {
 withAnimation {
 newCard.toggle()
 }
 }
 
 private func toggleEditing() {
 isEditing.toggle()
 }
 
 private func deleteCard(_ card: CreditCard) {
 withAnimation {
 modelContext.delete(card)
 selectedCard = nil
 }
 }
}



/** File: /Views/NaviationViews/SidebarView.swift ***************************************/
import SwiftUI
struct SidebarView: View {
 @Binding var selectedCategory: SideBarCategories
 @AppStorage("isExpanded") private var isExpanded: Bool = false
 
 
 private func sortedCategories() -> [SideBarCategories] {
 let categories: [SideBarCategories] = [
 .business,
 .personal,
 .all,
 .closed
 ]
 return categories.sorted { $0.order < $1.order }
 }
 
 var body: some View {
 List(selection: $selectedCategory) {
 Section("Card Categories") {
 ForEach(sortedCategories(), id: \.self) { category in
 NavigationLink(value: category) {
 Label(category.displayName, systemImage: category.displayImageName)
 }
 }
 }
 
 Section("Dashboard") {
 NavigationLink(value: SideBarCategories.charts) {
 Label(SideBarCategories.charts.displayName, systemImage: SideBarCategories.charts.displayImageName)
 }
 }
 }
 }
}



/** File: /Views/SettingsWindow/BankTabView.swift ***************************************/
import SwiftUI
import SwiftData
struct BankTabView: View {
 
 @State var selectedBank: Bank? = nil
 @State var bankToDelete: Bank? = nil
 @Environment(\.modelContext) private var modelContext
 
 @Query(sort: [SortDescriptor(\Bank.name, order: .forward)]) var existingBanks: [Bank]
 
 var body: some View {
 List(selection: $selectedBank) {
 ForEach(existingBanks) {bank in
 HStack{
 Text(bank.name)
 .frame(height: 25)
 Spacer()
 if selectedBank == bank {
 Button(action: {
 if let selected = selectedBank {
 bankToDelete = selected
 }
 }) {
 Label("Delete", systemImage: "trash")
 .imageScale(.large)
 .labelStyle(.iconOnly)
 }
 .disabled(selectedBank == nil)
 .buttonStyle(.plain)
 
 }
 }
 .tag(bank)
 }
 }
 .clipShape(.rect(cornerRadius: 10))
 .alert(item: $bankToDelete) { bank in
 Alert(
 title: Text("Delete Bank"),
 message: Text("Are you sure you want to delete \(bank.name)?"),
 primaryButton: .destructive(Text("Delete")) {
 delete(bank)
 },
 secondaryButton: .cancel()
 )
 }
 }
 
 private func delete(_ bank: Bank) {
 modelContext.delete(bank)
 selectedBank = nil
 try? modelContext.save()
 }
}



/** File: /Views/SettingsWindow/BonusTabView.swift ***************************************/
import SwiftUI
struct BonusTabView: View {
 var body: some View {
 Text("Coming Soon...")
 .padding()
 }
}



/** File: /Views/SettingsWindow/PromotionsTabView.swift ***************************************/
import SwiftUI
struct PromotionsTabView: View {
 var body: some View {
 Text("Coming Soon...")
 .padding()
 }
}



/** File: /Views/SettingsWindow/SettingsContentView.swift ***************************************/
import SwiftUI
struct SettingsContentView: View {
 var body: some View {
 TabView {
 
 BankTabView()
 .tabItem {
 Label("Banks", systemImage: "building.columns")
 }
 PromotionsTabView() .tabItem {
 Label("APR promotions", systemImage: "percent")
 }
 BonusTabView()
 .tabItem {
 Label("Bonuses", systemImage: "dollarsign.arrow.circlepath")
 }
 SettingsTabView()
 .tabItem{
 Label("Settings", systemImage:"gear")
 }
 }
 .frame(width: 400, height: 400)
 .padding()
 }
}



/** File: /Views/SettingsWindow/SettingsTabView.swift ***************************************/
import SwiftUI
struct SettingsTabView: View {
 var body: some View {
 Text("Coming Soon...")
 .padding()
 }
}